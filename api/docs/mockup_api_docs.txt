# Dummy API
Ready to use API Service full of dummy fake data. 
Data sandbox API for playing around with real users and post data.

Note: For this API, do not include fields in the request body if their value is null, or empty, unless the field is specifically required to be null.


**BASE URL**
`https://dummyapi.io/data/v1/`

**HEADERS**
It is required to set `app-id` Header for each request. 
This helps to determine your personal environment. So only you can access data that were created or updated. You can get your personal App ID value on your account page.
You can have as many App IDs as you want and use them in parallel (for different projects, environments, etc.).

Example: `app-id: 0JyYiOQXQQr5H9OEn21312`

**PAGING**
For some endpoints, you will get a single item. But for some of them, it should be a list of objects. 
To control the amount of items, you need to use `page` and `limit` URL parameters. 
`Limit` value should be in the range [5-50]. Default value: 20. 
`Page` value should be in the range [0-999]. Default value: 0.

Example: `https://dummyapi.io/data/v1/user?page=1&limit=10`
This will take 10 elements on the second page (page number starts from zero). 
Return items from 11 to 20 in a default order.

**CREATED**
In case you want to get only items created in the current environment (exclude base items), use `created` query parameter - `created=1`.

Example: `https://dummyapi.io/data/v1/user?created=1`

Please note that this is a general overview of the API. 
For specific details about the 'Getting Started', 'Model', and 'User Data' sections, you may need to navigate to those specific sections on the webpage.

# MODELS

**LIST**
Data structure for all responses that return an array of data. In case you get a single item, you will get it directly.

```json
{
  "data": Array(Model),
  "total": number (total items in DB),
  "page": number (current page),
  "limit": number (number of items on page)
}
```

**USER PREVIEW**
User as a part of list or other data like post/comment.

```json
{
  "id": string (autogenerated),
  "title": string ("mr", "ms", "mrs", "miss", "dr", ""),
  "firstName": string (length: 2-50),
  "lastName": string (length: 2-50),
  "picture": string (url)
}
```

**USER FULL**
Full user data returned by id.

```json
{
  "id": string (autogenerated),
  "title": string ("mr", "ms", "mrs", "miss", "dr", ""),
  "firstName": string (length: 2-50),
  "lastName": string (length: 2-50),
  "gender": string ("male", "female", "other", ""),
  "email": string (email),
  "dateOfBirth": string (ISO Date - value: 1/1/1900 - now),
  "registerDate": string (autogenerated),
  "phone": string (phone number - any format),
  "picture": string (url),
  "location": object (Location)
}
```

**LOCATION**
Using only as a part of full user data.

```json
{
  "street": string (length: 5-100),
  "city": string (length: 2-30),
  "state": string (length: 2-30),
  "country": string (length: 2-30),
  "timezone": string (Valid timezone value ex. +7:00, -1:00)
}
```

**POST CREATE**
Post data for create request.

```json
{
  "text": string (length: 6-50, preview only),
  "image": string (url),
  "likes": number (init value: 0),
  "tags": array (string),
  "owner": string (User id)
}
```

**POST PREVIEW**
Post data as a part of list.

```json
{
  "id": string (autogenerated),
  "text": string (length: 6-50, preview only),
  "image": string (url),
  "likes": number (init value: 0),
  "tags": array (string),
  "publishDate": string (autogenerated),
  "owner": object (User Preview)
}
```

**POST**
Post data returned by id.

```json
{
  "id": string (autogenerated),
  "text": string (length: 6-1000),
  "image": string (url),
  "likes": number (init value: 0),
  "link": string (url, length: 6-200),
  "tags": array (string),
  "publishDate": string (autogenerated),
  "owner": object (User Preview)
}
```

**COMMENT CREATE**
Comment data to create a new item.

```json
{
  "message": string (length: 2-500),
  "owner": string (User Id),
  "post": string (Post Id)
}
```

**COMMENT**

```json
{
  "id": string (autogenerated),
  "message": string (length: 2-500),
  "owner": object (User Preview),
  "post": string (Post Id),
  "publishDate": string (autogenerated)
}
```

**TAG**
Plain type. Array of strings.

# User Controller
List of routes to get User data.

**Get List**
Get a list of users sorted by registration date. Pagination and Created query parameters are available.
- Method: `GET`
- Endpoint: `/user`
- Response: List(User Preview)

**Get User by ID**
Get full user data by user ID.
- Method: `GET`
- Endpoint: `/user/:id`
- Response: User

**Create User**
Create a new user and return the created user data. The firstName, lastName, and email fields are required.
- Method: `POST`
- Endpoint: `/user/create`
- Body: User Create (firstName, lastName, email are required)
- Response: User

**Update User**
Update user by ID and return the updated User data. Only fields that should be updated need to be included in the request body. The email field cannot be updated.
- Method: `PUT`
- Endpoint: `/user/:id`
- Body: User data (email is forbidden to update)
- Response: User

**Delete User**
Delete user by ID and return the ID of the deleted user.
- Method: `DELETE`
- Endpoint: `/user/:id`
- Response: string (ID of the deleted user)

# Post Controller
List of routes to get Post data.

**Get List**
Get a list of posts sorted by creation date. Pagination and Created query parameters are available.
- Method: `GET`
- Endpoint: `/post`
- Response: List(Post Preview)

**Get List By User**
Get a list of posts for a specific user sorted by creation date. Pagination and Created query parameters are available.
- Method: `GET`
- Endpoint: `/user/:id/post`
- Response: List(Post Preview)

**Get List By Tag**
Get a list of posts for a specific tag sorted by creation date. Pagination and Created query parameters are available.
- Method: `GET`
- Endpoint: `/tag/:id/post`
- Response: List(Post Preview)

**Get Post by ID**
Get full post data by post ID.
- Method: `GET`
- Endpoint: `/post/:id`
- Response: Post

**Create Post**
Create a new post and return the created post data. The owner and post fields are required.
- Method: `POST`
- Endpoint: `/post/create`
- Body: Post Create (owner and post fields are required)
- Response: Post

**Update Post**
Update post by ID and return the updated Post data. Only fields that should be updated need to be included in the request body. The owner field cannot be updated.
- Method: `PUT`
- Endpoint: `/post/:id`
- Body: Post data (owner field is forbidden to update)
- Response: Post

**Delete Post**
Delete post by ID and return the ID of the deleted post.
- Method: `DELETE`
- Endpoint: `/post/:id`
- Response: string (ID of the deleted post)

# Comment Controller
List of routes to get Comment data.

**Get List**
Get a list of comments sorted by creation date. Pagination and Created query parameters are available.
- Method: `GET`
- Endpoint: `/comment`
- Response: List(Comment Preview)

**Get List By Post**
Get a list of comments for a specific post sorted by creation date. Pagination and Created query parameters are available.
- Method: `GET`
- Endpoint: `/post/:id/comment`
- Response: List(Comment Preview)

**Get List By User**
Get a list of comments for a specific user sorted by creation date. Pagination and Created query parameters are available.
- Method: `GET`
- Endpoint: `/user/:id/comment`
- Response: List(Comment Preview)

**Create Comment**
Create a new comment and return the created comment data. The owner and post fields are required.
- Method: `POST`
- Endpoint: `/comment/create`
- Body: Comment Create (owner and post fields are required)
- Response: Comment

**Delete Comment**
Delete comment by ID and return the ID of the deleted comment.
- Method: `DELETE`
- Endpoint: `/comment/:id`
- Response: string (ID of the deleted comment)

# Tag Controller
List of routes to get Tag data.

**Get List**
Get list of tags
- Method: GET
- Endpoint: /tag
- Response: List(string)

# Error Types

**APP_ID_NOT_EXIST**
The `app-id` header is found but the value is not valid.

**APP_ID_MISSING**
The `app-id` header is not set correctly. Note that you need to set the `app-id` header for each request. Refer to the Getting Started page for more info.

**PARAMS_NOT_VALID**
URL params (ex: `/user/{id}` - `{id}` is URL param) are not valid. This error is returned in both cases: param format is invalid, param is not found.

**BODY_NOT_VALID**
Applicable only for non-GET requests like POST, PUT, or DELETE. The body format is invalid, or even some keys are not valid.

**RESOURCE_NOT_FOUND**
Applicable for all requests that have `{id}` URL param. This means that the item that was requested (for get, update, delete) is not found. Works correctly if you try to create a post for a user that does not exist or was deleted.

**PATH_NOT_FOUND**
The request path is not valid. Check the controller documentation to validate the URL.

**SERVER_ERROR**
Something is wrong with the server, try again later. And/or report to our support telegram channel/email.